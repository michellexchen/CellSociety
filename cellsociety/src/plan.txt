0 EMPTY: The cell is empty ground or a burnt tree containing no tree.
1 TREE: The cell contains a tree that is not burning.
2 BURNING: The cell contains a tree that is burning.

make grid
	-center of grid set to burning (2)
	-edges of grid set to empty (0)
	-rest of grid set to tree (1)
	
spreading fire--function = spread(site, N, E, S, W)
	--apply spread at each iteration to determine value at its next step. 
	--value at next step depends on current value and values of NESW
	.if site empty, it remains empty at next step (first arg is EMPTY)
	.if site has tree, it may or may not catch fire (first arg is TREE)
	.if tree burning, first arg is BURNING, it will be empty at next step
	
	if site is TREE and (N, E, S, or W is BURNING)
         if a random number between 0.0 and 1.0 is less than probCatch
                  return BURNING
         else
                  return TREE
                  
    -at each time step, the program determines state of each cell at next step based
    on state of cell at current time
    
applySpread applies spread takes grid and P fire spreading to a cell and returns 
another grid with spread applied to each internal cell BUT should be using next state
property so dont need to follow this completely

need a list of cells

as long as burning tree is in list:

 do as long as a burning tree is in forest:
                  forest is assigned the result of call to applySpread with arguments forest and probCatch, which returns an
                         (n + 2)-by-  (n + 2) grid with spread applied to each internal cell of  forest
                  grids is assigned the list with forest appended onto the end of grids
           return grids
              